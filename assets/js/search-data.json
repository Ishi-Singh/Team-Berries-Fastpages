{
  
    
        "post0": {
            "title": "Plan",
            "content": "Planning . This is an overview of our plans going into the project. Since we’re still in some of the beginning stages of making this project we don’t know if all of these ideas will be implemented in the final product. but we hope to implement as many of them if time permits. | . Scrum Master . A diagram showing the process of creating the project with each member’s roles . Our scrum board, which we are using to keep track of problems that need to be fixed, tasks still left to do, and any notes we may have . DevOps Engineer . Goals: . figure out why we keep having merge conflicts | help the backend developer connect the backend code to the frontend | use html forms to collect input in the form of search bars: | . . Backend Developer . Made a feedback page using the Jokes API | . We wanted our project to be more interactive so we decided to makes a feedback page with help from the Jokes API. A quick overview on the backend code, we have a list which contains our feedback questions the feedback data contains dictionaries with key value pairs as shown in feedback data.append. This is also shown on the Team Berries Fastpage and on the flask portfoilo. . ’’’ import random . feedback_data = [] feedback_list = [ “Was this website efficient?”, “Is the site aesthetically pleasing?”, “Were you able to find your word?”, “Are we better than our competitors?”, “If this project were to be available on the market, would you use it?” . ] . Initialize jokes . def initFeedback(): # setup jokes into a dictionary with id, joke, haha, boohoo item_id = 0 for item in feedback_list: feedback_data.append({“id”: item_id, “feedback”: item, “yes”: 0, “no”: 0}) item_id += 1 # prime some haha responses for i in range(10): id = getRandomFeedback()[‘id’] addFeedbackHaHa(id) # prime some haha responses for i in range(5): id = getRandomFeedback()[‘id’] addFeedbackBooHoo(id) . Return all jokes from jokes_data . def getFeedbacks(): return(feedback_data) . Joke getter . def getFeedback(id): return(feedback_data[id]) . Return random joke from jokes_data . def getRandomFeedback(): return(random.choice(feedback_data)) . Liked joke . def favoriteFeedback(): best = 0 bestID = -1 for feedback in getFeedbacks(): if feedback[‘yes’] &gt; best: best = feedback[‘yes’] bestID = feedback[‘id’] return feedback_data[bestID] . Jeered joke . def jeeredFeedback(): worst = 0 worstID = -1 for feedback in getFeedbacks(): if feedback[‘no’] &gt; worst: worst = feedback[‘no’] worstID = feedback[‘id’] return feedback_data[worstID] . Add to haha for requested id . def addFeedbackHaHa(id): feedback_data[id][‘yes’] = feedback_data[id][‘yes’] + 1 return feedback_data[id][‘yes’] . Add to boohoo for requested id . def addFeedbackBooHoo(id): feedback_data[id][‘no’] = feedback_data[id][‘no’] + 1 return feedback_data[id][‘no’] . Pretty Print joke . def printFeedback(joke): print(joke[‘id’], joke[‘feedback’], “ n”, “yes:”, joke[‘yes’], “ n”, “no:”, joke[‘no’], “ n”) . Number of jokes . def countFeedback(): return len(feedback_data) . Test Joke Model . if name == “main”: initFeedback() # initialize jokes . # Most likes and most jeered best = favoriteFeedback() print(&quot;Most liked&quot;, best[&#39;yes&#39;]) printFeedback(best) worst = jeeredFeedback() print(&quot;Most jeered&quot;, worst[&#39;no&#39;]) printFeedback(worst) # Random joke print(&quot;Random joke&quot;) printFeedback(getRandomFeedback()) # Count of Jokes print(&quot;Jokes Count: &quot; + str(countFeedback())) &#39;&#39;&#39; . Frontend Developer . Wireframes for our website | . This is how we want to make the inital user input screen . This is what the user should see after inputing a word . We also want to add a word of the day page which gives a list of some words . Considerations made for customers We understand the customer needs an efficiant website which is user friendly, so were going to make our website easy to use and provide instructions as well to help them make the most out of their experience. We’ll also try to make an efficiant website by removing non-essential items which slow the efficiancy of our website, allowing for a better customer expirience . | Accommodations We plan to add text-to-speech to our project to help people with vision problems and for those who are learning English we’ll add a translator, allowing for people to translate any word to their languages for convinience. Through this we can reach a wider variety of people, allowing us to help more people. . | .",
            "url": "https://random-ign.github.io/Team-Berries-Fastpages/2022/10/23/plan.html",
            "relUrl": "/2022/10/23/plan.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Feedback",
            "content": "Question Yes No .",
            "url": "https://random-ign.github.io/Team-Berries-Fastpages/2022/10/20/feedback.html",
            "relUrl": "/2022/10/20/feedback.html",
            "date": " • Oct 20, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "Ekam Kaire (DevOps Engineer): the best team member obviously . Shreyas Sarurkar (Scrum Master): . Ishi Singh (Frontend Developer): . Lily Wu (Backend Developer): .",
          "url": "https://random-ign.github.io/Team-Berries-Fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://random-ign.github.io/Team-Berries-Fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}